@page
@using Microsoft.AspNetCore.Html;
@using ReadSharp;
@using SolucoesDefeitos.Pesentation.RazorPages.Components.DisplayTempDataMessage;
@using SolucoesDefeitos.Pesentation.RazorPages.Components.Pager;
@using SolucoesDefeitos.Pesentation.RazorPages.Components.Pager.Model;
@model SolucoesDefeitos.Pesentation.RazorPages.Pages.Anomaly.ListModel
@{
    var additionalParameters = new List<(string, string)>();
    if (!string.IsNullOrEmpty(Model.SearchTerm?.Trim()))
    {
        additionalParameters.Add((nameof(Model.SearchTerm), Model.SearchTerm));
    }

    if (Model.ManufacturerIds?.Any() ?? false)
    {
        additionalParameters.AddRange(Model.ManufacturerIds.Select(id => (nameof(Model.ManufacturerIds), id.ToString())));
    }

    if (Model.ProductGroupIds?.Any() ?? false)
    {
        additionalParameters.AddRange(Model.ProductGroupIds.Select(id => (nameof(Model.ProductGroupIds), id.ToString())));
    }

    if (Model.ProductIds?.Any() ?? false)
    {
        additionalParameters.AddRange(Model.ProductIds.Select(id => (nameof(Model.ProductIds), id.ToString())));
    }
}

@await Component.InvokeAsync(nameof(DisplayTempDataMessage))
<div class="p-3 mb-2 bg-secondary text-white">
    <span>Banco de Soluções e Defeitos</span>
</div>
<form id="frmAnomalyList" asp-page="./List" method="get">
    <div class="card mb-3">
        <div class="card-header">
            Filtros
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-12 mb-3">
                    <label class="form-label" for="txtSearchTerm">Termo à pesquisar</label>
                    <input type="text" class="form-control" id="txtSearchTerm" name="SearchTerm" value="@Model.SearchTerm" />
                </div>
                <div class="col-md-4 col-sm-12 mb-3">
                    <label class="form-label" for="slManufacturer">Fabricante</label>
                    <select class="form-select" id="slManufacturer" name="ManufacturerIds" multiple>
                        @if (Model.Manufacturers?.Any() ?? false)
                        {
                            foreach (var manufacturer in Model.Manufacturers)
                            {
                                <!option  value="@manufacturer.ManufacturerId" @((Model.ManufacturerIds?.Contains(manufacturer.ManufacturerId) ?? false) ? "selected" : string.Empty)>@manufacturer.Name</!option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-4 col-sm-12 mb-3">
                    <label class="form-label" for="slProductGroup">Grupo</label>
                    <select class="form-select" id="slProductGroup" name="ProductGroupIds" multiple>
                        @if (Model.ProductGroups?.Any() ?? false)
                        {
                            foreach (var productGroup in Model.ProductGroups)
                            {
                                <!option  value="@productGroup.ProductGroupId" @((Model.ProductGroupIds?.Contains(productGroup.ProductGroupId) ?? false) ? "selected" : string.Empty)>@productGroup.Description</!option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-4 col-sm-12 mb-3">
                    <label class="form-label" for="slProduct">Produto</label>
                    <select class="form-select" id="slProduct" name="ProductIds" multiple>
                        @if (Model.Products?.Any() ?? false)
                        {
                            foreach (var product in Model.Products)
                            {
                                <!option  value="@product.ProductId" @((Model.ProductIds?.Contains(product.ProductId) ?? false) ? "selected" : string.Empty)>@product.Name</!option>
                            }
                        }
                    </select>
                </div>
                <div class="btn-group btn-group-sm">
                    <button type="submit" class="btn btn-primary"><i class="bi bi-funnel"></i>&nbsp;Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" onclick="list.filterClear()"><i class="bi bi-backspace"></i>&nbsp;Limpar Filtro</button>
                </div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <a class="btn btn-primary" asp-page="./Form"><i class="bi bi-plus-lg"></i>&nbsp;Novo</a>
    </div>
    <div class="p-2 bg-light border">
        @foreach (var anomaly in Model.PagedData.Data)
        {
            <div class="card w-100">
                <div class="card-body">
                    <h5 class="card-title text-primary">@anomaly.Summary</h5>
                    <div class="card-text">
                        @{
                            var description = HtmlUtilities.ConvertToPlainText(anomaly.Description ?? string.Empty);
                            if (description.Length > 100)
                            {
                                description = description.Substring(0, 100);
                            }
                        }
                        @(description)
                    </div>
                    <a href="/Anomaly/View/@anomaly.AnomalyId" class="stretched-link"></a>
                </div>
            </div>
        }
        <div class="row mt-2">
            <span>@Model.PagedData.TotalRecords Registro(s)</span>
        </div>
    </div>

    @await Component.InvokeAsync(nameof(Pager),
    new PagerModel {
    CurrentPage = Model.PagedData.CurrentPage,
    PageSize = Model.PagedData.PageSize,
    Path = "/Anomaly/List",
    TotalRecords = Model.PagedData.TotalRecords,
    AdditionalParameters = additionalParameters
    })
</form>

@section Scripts {
    <script type="text/javascript" src="~/js/pages/anomaly/list.js" asp-append-version="true"></script>
}